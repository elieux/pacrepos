#!/usr/bin/env python3

import contextlib
import configparser
import argparse
import shutil
import sys
import re

def query_yes_no(question, default="yes"):
    """Ask a yes/no question and returns the user's answer.

    "question" is a string that is presented to the user.
    "default" is the presumed answer if the user just hits <Enter>. It must be "yes" (the default), "no" or None (meaning an answer is required of the user).

    The return value is a boolean.
    """

    valid = { "yes": True, "y": True, "ye": True, "no": False, "n": False }
    if default is None:
        prompt = " [y/n] "
    elif default == "yes":
        prompt = " [Y/n] "
    elif default == "no":
        prompt = " [y/N] "
    else:
        raise ValueError("invalid default answer: '%s'" % default)

    while True:
        sys.stdout.write(question + prompt)
        choice = input().lower()
        if default is not None and choice == '':
            return valid[default]
        elif choice in valid:
            return valid[choice]
        else:
            sys.stdout.write("Please respond with 'yes' or 'no' (or 'y' or 'n').\n")

class PacConf():
    PACMAN_FILE = '/etc/pacman.conf'

    def __init__(self, config_file):
        self.config_file = config_file
        self.re_installed = re.compile(' ^ \\s* Include \\s* = \\s* {0} \\s* ( [#] .* )? $ '.format(re.escape(self.config_file)), re.VERBOSE | re.MULTILINE | re.IGNORECASE)

    def backup(self):
        shutil.copyfile(self.PACMAN_FILE, '{0}.old'.format(self.PACMAN_FILE))

    def is_installed(self):
        with open(self.PACMAN_FILE, 'r') as file:
            return bool(self.re_installed.search(file.read()))

    def uninstall(self):
        if not self.is_installed():
            raise Exception('Not installed.')

        self.backup()
        with open(self.PACMAN_FILE, 'r') as file:
            contents = file.read()
        contents = self.re_installed.sub('', contents)
        with open(self.PACMAN_FILE, 'w') as file:
            file.write(contents)

    def install(self):
        if self.is_installed():
            raise Exception('Already installed.')

        print("Installing packages from unofficial repositories is unsupported and discouraged and could partially or completely break your system. You probably won't get much technical support if that happens, so do it only if you know how to repair your system.")
        if not query_yes_no("Do you want to continue?", default = "no"):
            return

        self.backup()
        with open(self.PACMAN_FILE, 'a') as file:
            file.write('\n')
            file.write('Include = {0}\n'.format(self.config_file))
        with open(self.config_file, 'a+'):
            pass # just create the file

class PacParser(configparser.ConfigParser):
    def optionxform(self, option):
        return option

class PacRepos:
    CONFIG_FILE = '/etc/pacrepos.conf'

    @contextlib.contextmanager
    def open(self):
        config = PacParser()
        config.read(self.CONFIG_FILE)
        yield config
        with open(self.CONFIG_FILE, 'w') as file:
            file.write('# Generated by the pacrepos tool\n')
            file.write('\n')
            config.write(file)

    def add(self, name, url):
        with self.open() as config:
            if name in config:
                raise Exception("Repository '{0}' is already present.".format(name))
            config[name] = { 'Server': url, 'SigLevel': 'Optional' }

    def remove(self, name):
        with self.open() as config:
            if name not in config:
                raise Exception("Repository '{0}' is not present.".format(name))
            del config[name]

def get_arg_parser():
    parser = argparse.ArgumentParser(description = 'Manage pacman repositories.')
    group = parser.add_mutually_exclusive_group(required = True)
    group.add_argument('-I', '--install', action = 'store_true', help = 'install into pacman.conf')
    group.add_argument('-U', '--uninstall', action = 'store_true', help = 'uninstall from pacman.conf')
    group.add_argument('-A', '--add', action = 'store_true', help = 'add the repository NAME with URL')
    group.add_argument('-R', '--remove', action = 'store_true', help = 'remove the repository NAME')
    parser.add_argument('--name', help = 'the repository identifier')
    parser.add_argument('--url', help = 'the repository server')
    return parser

args = get_arg_parser().parse_args()
conf = PacConf(PacRepos.CONFIG_FILE)

if args.install or args.uninstall:
    if args.install:
        conf.install()
    elif args.uninstall:
        conf.uninstall()
elif args.add or args.remove:
    if not args.name:
        raise Exception('Name is required when adding or removing a repository.')

    if not conf.is_installed():
        print("Don't forget to run '{0} --install'.".format(sys.argv[0]))

    repos = PacRepos()
    if args.add:
        if not args.url:
            raise Exception('URL is required when adding a repository.')
        repos.add(args.name, args.url)
    elif args.remove:
        repos.remove(args.name)
else:
    raise Exception('Not implemented.')
